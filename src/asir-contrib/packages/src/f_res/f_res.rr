/*	$OpenXM$ */

F1 = c11 + c12*x*y + c13*x^2*y + c14*x$
F2 = c21*y + c22*x^2*y^2 + c23*x^2*y + c24*x$
F3 = c31 + c32*y + c33*x*y + c34*x$
Q1 = [[0,0],[1,0],[1,1],[2,1]]$
Q2 = [[0,1],[1,0],[2,1],[2,2]]$
Q3 = [[0,0],[0,1],[1,0],[1,1]]$

module f_res$

static Sres_Path$
static Gmp_Path$
Sres_Path = "ox_sres"$
Gmp_Path = "ox_sresgmp"$
static Time;
Time = []$
static Sres_proc$
static Float_proc$
static Gmp_proc$
Sres_proc = -1$
Float_proc = -1$
Gmp_proc = -1$

/* from common.rr */
localf check$
localf clear$
localf gettime$
localf diff$
localf submatrix$

/* from mres.rr */
localf mres$
localf mresM$
localf mhrM$

/* from dres.rr */
localf dres$
localf dresM$
localf dixonpolynomial$
localf matrixdecomp$
localf dmono$

/* from sres.rr */
localf sres$
localf sample$
localf help$
localf find_proc$
localf start$
localf float$
localf gmp$
localf conv$
localf redcheck$
localf support$
localf support2$
localf np$
localf msum$
localf msum_sub1$
localf msum_sub2$
localf msum_sub3$
localf vdist$
localf vdist_main$
localf vdist_sub$
localf mayan_pyramid$
localf msum_sub1i$
localf msum_sub1i2$
localf mvol$
localf sort_vdist$
localf cnthdr$
localf listadd$
localf indexof$
localf debug$
localf exit$
localf sres_main$
localf setvect$
localf nextuse$

def sample()
{
	print("sample :")$
	print("F1 = c11 + c12*x*y + c13*x^2*y + c14*x$");
	print("F2 = c21*y + c22*x^2*y^2 + c23*x^2*y + c24*x$");
	print("F3 = c31 + c32*y + c33*x*y + c34*x$\n");
	print("F=(x+y+z)^3;\nNP=f_res.np( F, [x,y,z] );\n");
	print("T1=f_res.msum([Q2,Q3]);\nV1=f_res.vdist(T1,[Q2,Q3],[20,11]);\n");
	print("Sres=f_res.sres( [F1,F2,F3], [x,y] |v=[20,11] )$");
	print("Sres2=f_res.sres( [a1*x+a2*y+a3,b1*x+b2*y+b3,c1*x^2+c2*y^2+c3+c4*x*y+c5*x+c6*y], [x,y]|v=[13,17])$");
	return "";
}

def help()
{
	print("start: start ox_sres");
	print("float: use floating ox_sres");
	print("gmp: use gmp ox_sres(ox_f_res.g)");
	print("conv: culcutate convex hull");
	print("support: change polynomial to support polytopes");
	print("np: change polynomial to Newton polytopes");
	print("msum: calculate Minkowski sum's all lattice(if conv option is 1 then it returns convex hull");
	print("mvol: calculate Mixed volume");
	print("sres: calculate Sparse resultant");
	print("sample: show sample commands");
	print("help: help for some functions");
	return "";
}

def find_proc()
{
	if( Sres_proc == -1 ){
		Sres_proc = start( 0 );
	}
	return (Sres_proc);
}

def start( N )
{
	/*	if "N" is 1 then this function starts new process "Gmp_Path",
		else starts new process "Sres_Path".
	*/

	if( N == 1 ){
		P = Gmp_proc = ox_launch( 0, Gmp_Path );
	} else {
		P = Float_proc = ox_launch( 0, Sres_Path );
	}

	if( P == -1 ){
		print("f_res.start : error");
		debug;
	}

	Sres_proc = P;
	return P;
}

def float()
{
	if( Float_proc == -1 ){
		Float_proc = start( 0 );
	}

	Sres_proc = Float_proc;
	return Sres_proc;
}

def gmp()
{
	if( Gmp_proc == -1 ){
		Gmp_proc = start( 1 );
	}

	Sres_proc = Gmp_proc;
	return Sres_proc;
}

def conv(List)
{
	/*	This function is for culcutating convex hull.
		conv( [ [1,1],[0,0],[0,2],[2,0],[2,2] ] ) returns [ [0,0],[0,2],[2,0],[2,2] ] .	*/

	if( type(List) != 4 ){
		print("f_res.conv : invalid argument");
		return;
	}

	M = [];
	L = List;
	LL = length( L[0] );	/* Length of List  */

	while( L != [] ){
		T = car(L);
		if( type( T ) != 4 ){
			print("f_res.conv : invalid argument");
			return;
		}
		if( length(T) != LL ){
			print("f_res.conv : length of List must be same");
		}

		M = cons( cons(1,T), M );
		L = cdr(L);
	}

	R = redcheck( M );

	Result = [];
	while( R != [] ){
		Result = cons( cdr( car(R) ), Result );
		R = cdr( R );
	}

	return Result;
}

def redcheck( List )
{
	/*	This function is subroutine of the function "conv".
		this calls cddlib's redcheck. so, "List" should be cddlib's style.	*/

	if( type(List) != 4 ){
		print("f_res.redcheck : invalid argument");
		return;
	}

	L = List;
	LL = length( L[0] );	/* Length of List  */

	while( L != [] ){
		T = car( L );
		if( type( T ) != 4 ){
			print("f_res.redcheck : invalid argument");
			return;
		}
		if( length(T) != LL ){
			print("f_res.redcheck : length of List must be same");
		}
		if( T[0] != 1 ){
			print("f_res.redcheck : first element must be 1");
			return;
		}
		L = cdr(L);
	}

	Rowsize = length( List );
	Colsize = LL;

	Proc = find_proc();
	ox_cmo_rpc(Proc,"redcheck",Rowsize,Colsize,List);

	return ox_pop_cmo(Proc);
}

def support( Equation, Vars )
{
	/*	This function returns support polytope for "Equation".
		"Vars" is variable for "Equation".
		support( x^2 + x*y + y^2, [x,y] ) returns [ [0,2],[1,1],[2,0] ] .	*/

	F = dp_ptod( Equation, Vars );

	CL = [];
	while( F != 0 ){
		CL = cons( vtol( dp_etov( F ) ), CL );
		F = dp_rest( F );
	}

	return CL;
}

def support2( Equation, Vars )
{
	/*	This function returns support polytope with coefficient for "Equation".
		"Vars" is variable for "Equation".
		support2( c1*x^2 + c2*x*y + c3*y^2, [x,y] ) returns [ [c3,[0,2]],[c2,[1,1]],[c1,[2,0]] ] .	*/

	F = dp_ptod( Equation, Vars );

	CL = [];
	while( F != 0 ){
		CL = cons( [ dp_hc( F ), vtol( dp_etov( F ) )], CL );
		F = dp_rest( F );
	}

	return CL;
}

def np( Equation, Vars ){
	return conv( support( Equation, Vars ) );
}

def msum( Polytopes )
{
	/*	This function returns the all lattice points in Minkowski sum of "Polytopes".
		msum( [ [[0,0],[1,0],[0,1]], [[0,0],[1,0],[0,1],[1,1]] ] ) returns [ [0,0],[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1] ] .	*/

	T = [];	/*	this variable is for result	*/
	K = 0;
	P = [];	/*	vector of known coordinates	*/

	M = length( Polytopes );
	N = length( Polytopes[0][0] );

	T = msum_sub1( Polytopes, [], 0 );
	K++;

	while( K < N ){

		B = [];
		while( T != [] ){
			P = car(T);
			A = msum_sub1( Polytopes, P, K );
			B = append( B, A );
			T = cdr( T );
		}
		T = B;
		K++;

	}

	Opt = getopt( conv );
	if( Opt == 1 ){
		return conv(T);
	} else {
		return T;
	}
}

def msum_sub1( Polytopes, P, K )
{
	/*	This function finds the minimum and maximum K-th coordinates in the Minkowski sum of input Polytopes when the first K-1 coordinates are fixed to the coordinates in P.	*/

	R = [];
	N = length( Polytopes );

	if( K == 0 ){
		for(I=0;I<N;I++){
			A = msum_sub2( Polytopes[I] );
			MN += A[0];
			MX += A[1];
		}

	} else {
		A = msum_sub3( Polytopes, P, K );	/*	make LP data.	*/

		Rowsize = A[0];
		Colsize = A[1];
		Matrix = A[2];
		Objvect = A[3];

		Proc = find_proc();
		ox_cmo_rpc(Proc,"ilpmaxmin",Rowsize,Colsize,Matrix,Objvect);
		Result = ox_pop_cmo(Proc);

		MN = Result[0];
		MX = Result[1];
	}

	for(J=MX;J>=MN;J--){
		R = cons( append( P, [J] ), R );
	}

	return R;
}

def msum_sub2( Q )
{
	/*	This function finds the minimum and maximum 0th coordinates in Q.
		therefore,  msum_sub2( [ [0,0],[1,0],[1,1],[2,1] ] ) returns [0,2].	*/

	MN = MX = Q[0][0];

	T = cdr( Q );
	while( T != [] ){
		A = car( T )[0];

		if( A < MN ){
			MN = A;
		}
		if( A > MX ){
			MX = A;
		}
		T = cdr( T );
	}

	return [MN,MX];
}

def msum_sub3( Polytopes, P, K )
{
	N = length( Polytopes );

	Matrix = [];
	Rowsize = K*2 + N*2;
	Colsize = 1;

	Vv = newvect( N );

	for(I=0;I<N;I++){
		Vv[I] = length( Polytopes[I] );
		Rowsize += Vv[I];
		Colsize += Vv[I];
	}

	V = newvect( Colsize );

	for(I=Colsize-1;I>0;V[I]=0,I--){
		V[I] = 1;
		Matrix = cons( vtol( V ), Matrix );
	}

	for(I=N-1;I>=0;I--){
		E = F = [];
		for(J=N-1;J>=0;J--){
			if(I==J){
				for(M=0;M<Vv[I];M++){
					E = cons( -1, E );
					F = cons( 1, F );
				}
			} else {
				for(M=0;M<Vv[J];M++){
					E = cons( 0, E );
					F = cons( 0, F );
				}
			}
		}

		E = cons( 1, E );
		F = cons( -1, F );
		Matrix = cons( F, cons( E, Matrix ) );
	}


	for(I=0;I<K;I++){

		V[0] = P[I];
		for(J1=1,J2=J3=0;J1<Colsize;J1++,J2++){
			if( J2==Vv[J3] ){
				J3++;
				J2 = 0;
			}
			V[J1] = -Polytopes[J3][J2][I];
		}
		Matrix = cons( vtol( V ), Matrix );

		for(J=0;J<Colsize;J++) V[J] = -V[J];
		Matrix = cons( vtol( V ), Matrix );

	}

	/*	For Object row.	*/
	V[0] = 0;
	for(J1=1,J2=J3=0;J1<Colsize;J1++,J2++){
		if( J2==Vv[J3] ){
			J3++;
			J2 = 0;
		}
		V[J1] = Polytopes[J3][J2][K];
	}
	Obj = vtol( V );

	return [Rowsize,Colsize,Matrix,Obj];
}

def vdist( Points, Polytopes, V )
{

	Result = [];

	if( type( Points ) != 4 ){
		print("f_res.vdist : invalid argument");
		return;
	}

	N = length( Points );

	for(I=N-1;I>=0;I--){
		Vdist = vdist_main( Points[I], Polytopes, V );
		Result = cons( [ Vdist, Points[I] ], Result );
	}
	return Result;
}

def vdist_main( Point, Polytopes, V )
{
	A = vdist_sub( Point, Polytopes, V );	/*	make LP data.	*/

	Rowsize = A[0];
	Colsize = A[1];
	Matrix = A[2];
	Objvect = A[3];

	Proc = find_proc();
	ox_cmo_rpc(Proc,"lpmax",Rowsize,Colsize,Matrix,Objvect);
	Result = ox_pop_cmo(Proc);

	return Result;

/*	old version
	return ( Result[0] / Result[1] );
*/
}

def vdist_sub( Point, Polytopes, Sigma )
{
	N = length( Polytopes );
	K = length( Point );

	Matrix = [];
	Rowsize = K*2 + N*2;
	Colsize = 2;

	Vv = newvect( N );

	for(I=0;I<N;I++){
		Vv[I] = length( Polytopes[I] );
		Rowsize += Vv[I];
		Colsize += Vv[I];
	}

	V = newvect( Colsize );

	for(I=Colsize-1;I>0;V[I]=0,I--){
		V[I] = 1;
		Matrix = cons( vtol( V ), Matrix );
	}

	for(I=N-1;I>=0;I--){
		E = F = [ 0 ];
		for(J=N-1;J>=0;J--){
			if(I==J){
				for(M=0;M<Vv[I];M++){
					E = cons( -1, E );
					F = cons( 1, F );
				}
			} else {
				for(M=0;M<Vv[J];M++){
					E = cons( 0, E );
					F = cons( 0, F );
				}
			}
		}

		E = cons( 1, E );
		F = cons( -1, F );
		Matrix = cons( F, cons( E, Matrix ) );		
	}


	for(I=0;I<K;I++){

		V[0] = Point[I];
		for(J1=1,J2=J3=0;J1<Colsize-1;J1++,J2++){
			if( J2==Vv[J3] ){
				J3++;
				J2 = 0;
			}
			V[J1] = -Polytopes[J3][J2][I];
		}
		V[Colsize-1] = Sigma[I];
		Matrix = cons( vtol( V ), Matrix );

		for(J=0;J<Colsize;J++) V[J] = -V[J];
		Matrix = cons( vtol( V ), Matrix );

	}

	/*	For Object row.	*/
	for(J=0;J<Colsize-1;J++){
		V[J] = 0;
	}
	V[Colsize-1] = 1;
	Obj = vtol( V );

	return [Rowsize,Colsize,Matrix,Obj];
}

def mayan_pyramid( Polytopes, V )
{
	/*	This function returns T \subset Q^{(n)} and v-distance for all lattice points in T.
		mayan_pyramid( [ [[0,0],[1,0],[0,1]], [[0,0],[1,0],[0,1],[1,1]] ], [11,13]  ) returns [ [0,[0,2]],[1/13,[0,1]],[1/8,[0,0]],[0,[1,2]],[1/24,[1,1]],[1/12,[1,0]],[0,[2,1]],[0,[2,0]] ] .
		if you have a bound beta on v-distance and also a bound c on #T, use option "beta" and "c".
		sample : mayan_pyramid( Polytopes, V | beta=1/10,c=10 );
	*/

	/*	get option	*/
	Beta = getopt(beta);
	C = getopt(c);
	Lambda = getopt(lambda);
	if( type(Beta) == -1 ) Beta = 0;
	if( type(Lambda) == -1 ) Lambda = 3;

	T = [];	/*	this variable is for result	*/
	P = [];	/*	vector of known coordinates	*/

	N = length( Polytopes );

	if( N != 1 ){
		T = msum_sub1i( Polytopes, [], 0, V, Beta );
		K = 1;
	} else {
		return msum_sub1i2( Polytopes, [], 0, V, Beta );
	}

	while( K < N-1 ){

		B = [];
		while( T != [] ){
			P = car(T);
			A = msum_sub1i( Polytopes, P, K, V, Beta );
			B = append( B, A );
			T = cdr( T );
		}
		T = B;
		K++;

	}

	/*	last iteration	*/
	B = [];
	while( T != [] ){
		P = car(T);
		A = msum_sub1i2( Polytopes, P, K, V, Beta );
		B = append( B, A );
		if( type(C) != -1 && length( B ) >= C*Lambda ){
			print("+",2);
			break;
		}
		T = cdr( T );
	}

	return B;
}

def msum_sub1i( Polytopes, P, K, V, Beta )
{
	/*	This function finds the minimum and maximum K-th coordinates which has bigger v-distance than "Beta" in the Minkowski sum of input Polytopes when the first K-1 coordinates are fixed to the coordinates in P.	*/

	R = [];
	N = length( Polytopes );

	if( K == 0 ){
		for(I=0;I<N;I++){
			A = msum_sub2( Polytopes[I] );
			MN += A[0];
			MX += A[1];
		}

	} else {
		A = msum_sub3( Polytopes, P, K );	/*	make LP data.	*/

		Rowsize = A[0];
		Colsize = A[1];
		Matrix = A[2];
		Objvect = A[3];

		Proc = find_proc();
		ox_cmo_rpc(Proc,"ilpmaxmin",Rowsize,Colsize,Matrix,Objvect);
		Result = ox_pop_cmo(Proc);

		MN = Result[0];
		MX = Result[1];
	}

	for(J=MN;J<=MX;J++){
		Check = append( P, [J] );
		Vdist = vdist_main( Check, Polytopes, V );
		if( ( Beta == 0 && Vdist > 0 ) || ( Vdist >= Beta ) ){
			R = cons( Check, R );
		} else {
			if( J > MN && Vdist < Pr ){
				break;
			} else {
				Pr = Vdist;
			}
		}
	}

	return reverse(R);
}

def msum_sub1i2( Polytopes, P, K, V, Beta )
{
	/*	This function returns sub-result for Improved Mayan pyramid.
		This function finds points in the Minkowski sum of input Polytopes when the first N-1 coordinates are fixed to the coordinates in P, and their v-distance, which is bigger than "Beta".	*/

	R = [];
	N = length( Polytopes );

	A = msum_sub3( Polytopes, P, K );	/*	make LP data.	*/

	Rowsize = A[0];
	Colsize = A[1];
	Matrix = A[2];
	Objvect = A[3];

	Proc = find_proc();
	ox_cmo_rpc(Proc,"ilpmaxmin",Rowsize,Colsize,Matrix,Objvect);
	Result = ox_pop_cmo(Proc);

	MN = Result[0];
	MX = Result[1];


	for(J=MN;J<=MX;J++){
		Check = append( P, [J] );
		Vdist = vdist_main( Check, Polytopes, V );
		if( Beta != 0 && Vdist < Beta && J > MN && Vdist < Pr ){
			break;
		} else {
			R = cons( [ Vdist, Check ], R );
			Pr = Vdist;
		}
	}

	return R;
}

def mvol( Polytopes )
{

	Nsys = length( Polytopes );

	Index = [];
	for(I=Nsys-1;I>=0;I--){
		Index = cons( length( Polytopes[I] ), Index );
	}

	if( length( Polytopes[0][0] ) != Nsys ){
		print("mvol : error");
		return;
	}

	Proc = find_proc();
	ox_cmo_rpc(Proc,"mvol",Nsys,Index,Polytopes);
	Result = ox_pop_cmo(Proc);

	return Result;
}

def sres( Equations, Vars )
{
	Imp = getopt(imp);
	Beta = getopt(beta);
	Lambda = getopt(lambda);
	C = getopt(c);
	P = getopt(p);
	Sub = getopt(sub);
	V = getopt(v);

	if( type( V ) != 4 ){
		V = [];
		for(I=0;I<length(Vars);I++){
			V = cons( I+11, V );
		}
		V = reverse(V);
	}


	if( type( Equations ) != 4 || type( Vars ) != 4 ){
		print("f_res.sres : invalid argument");
		return;
	}

	N = length( Equations );

	if( length( Vars ) != N-1 ){
		print("f_res.sres : length of Vars is not correct");
		return;
	}

	if( length( Vars ) != length( V ) ){
		print("f_res.sres : length of V list is not correct");
		return;
	}

	check();
	print("Newton polytopes...",2);
	Qs = map( np, Equations, Vars );
	print("done");

	check();

	print("Minkowski sum and v-dist...",2);
	Q_i = Vi = [];
	for(I=N-1;I>=0;I--){
		Q_i = cons( cnthdr( I, Qs ), Q_i );
		if( Imp == 1 ){
			Vi = cons( mayan_pyramid( car( Q_i ), V | beta=Beta,lambda=Lambda,c=C), Vi );
		} else {
			Ti = msum( car( Q_i ) );
			Vi = cons( vdist( Ti, car( Q_i ), V ), Vi );
		}
	}
	print("done");



	Vdata = sort_vdist( Vi );

	check();

	print("Mixed volume...",0);
	MV = map( mvol, Q_i );
	MVi = ltov( MV );
	print("done",0);print(MV);

	check();

	Eql = map( support2, Equations, Vars );
	R = sres_main( Eql, Vdata, MV |p=P,sub=Sub );

	check();
	return R;
}

def sort_vdist( Vi )
{
	/*	sorting v-distance	*/

	N = length( Vi );
	Vdata = newvect( N );

	for(I=0;I<N;I++){
		Vdata[I] = newvect( length( Vi[I] ) );

		Left = -1;
		Right = length( Vi[I] ) - 1;
		VV = Vi[I];
		while( VV != [] ){
			W = car( VV );
			VV = cdr( VV );

			if( W[0] <= 0 ){
				Vdata[I][Right] = W;
				Right--;
			} else {
				if( Left == -1 ){
					Vdata[I][0] = W;
					Left++;
				} else {
					for(J=Chk=0;J<=Left;J++){
						if( W[0] > Vdata[I][J][0] ){
							for(K=Left;K>=J;K--){
								Vdata[I][K+1] = Vdata[I][K];
							}
							Vdata[I][J] = W;
							Left++;
							Chk = 1;
							break;
						}
					}
					if( Chk == 0 ){
						Left++;
						Vdata[I][Left] = W;
					}
				}
			}
		}
	}

	return Vdata;
}

def cnthdr( N, List )
{
	/*	Content of `N-TH Decrement` part of Register.
		cnthdr( 2, [1,2,3,4] ) returns [1,2,4] .	*/

	if( type( List ) != 4 || length( List ) <= N || N < 0 ){
		print("f_res.cnthdr : invalid argument");
		return;
	}

	Tmp = [];
	for(I=0;I<N;I++){
		Tmp = cons( car( List ), Tmp );
		List = cdr( List );
	}

	List = cdr( List );

	return append( reverse( Tmp ), List );
}

def listadd( A, B )
{
	/*	addition of list like vector.
		listadd( [1,2,3], [2,2,2] ) returns [3,4,5] .
	*/
	A = ltov( A );
	B = ltov( B );

	return vtol( A+B );
}

def indexof( List, Lists )
{
	/*	Find the first "List" in "Lists", and return the index.
		if "List" is not found, return (-1). 	*/

	N = 0;
	while( Lists != [] ){
		if( List == car( Lists ) ){
			return N;
		}
		Lists = cdr( Lists );
		N++;
	}

	return (-1);
}

def debug(N)
{
	Proc = find_proc();
	ox_cmo_rpc(Proc,"debugprint",N);
}	

def exit()
{
	Proc = find_proc();
	ox_cmo_rpc(Proc,"exit");
	return 0;
}

def sres_main( Eql, Vdata, MV )
{
	Prim = getopt(p);
	Sub = getopt(sub);

	N = length( Eql );
	CVar = vars( Eql );

	if( type(Prim) != 1 ){
		Prim = 65521;
	}

	if( type(Sub) != 4 ){
		Sub = [];
		for(I=0;I<length(CVar);I++){
			Sub = cons( prime(15+I) % Prim , Sub );
		}
	}

	print("Matrix construction...",2);

	Eqlp = Eql;
	while( CVar != [] ){
		Eqlp = subst( Eqlp, car(CVar), car(Sub) );
		CVar = cdr( CVar );
		Sub = cdr( Sub );
	}

	for(I=0;I<N;I++){
		MaxRow += length( Vdata[I] );
	}

	Matrix = newvect( MaxRow );
	MatLen = newvect( MaxRow );
	MatCor = newvect( MaxRow );
	Monolist = [];

	for(I=MatRow=0;I<N;I++){
		for(J=0;J<MV[I];J++){
			Tmp = setvect( Eqlp[I], Vdata[I][J][1], Monolist );
			Matrix[MatRow] = Tmp[0];
			MatLen[MatRow] = Tmp[1];
			MatCor[MatRow] = [I,J];
			Monolist = Tmp[2];
			MatRow++;
		}
	}

	MatCol = MatLen[MatRow-1];
	Used = newvect( N, MV );

	/*	Initialize for fraction-Free Gaussian Elimination	*/
	Divisor = 1;
	InvDivisor = 1;
	R = 0;
	K = 0;
	F = 0;

	while( 1 ){

		if( MatRow >= MatCol ){

			/* do FFGE to added rows.	*/
			D = 1;
			InvD = 1;
			for(L=0;L<K;L++){

				for(I=F;I<MatRow;I++){
					if( MatLen[L] > MatLen[I] ){
						Tmp = newvect( MatLen[L] );
						for(J=L+1;J<MatLen[I];J++){
							Tmp[J] = ( ( Matrix[L][L]*Matrix[I][J] - Matrix[L][J]*Matrix[I][L] ) * InvD ) % Prim;
						}
						for(;J<MatLen[L];J++){
							Tmp[J] = ( Matrix[L][J]*Matrix[I][L] * InvD ) % Prim;
						}
						Matrix[I] = Tmp;
						MatLen[I] = MatLen[L];
					} else {
						for(J=L+1;J<MatLen[L];J++){
							Matrix[I][J] = ( ( Matrix[L][L]*Matrix[I][J] - Matrix[L][J]*Matrix[I][L] ) * InvD ) % Prim;
						}
						for(;J<MatLen[I];J++){
							Matrix[I][J] = ( Matrix[L][L]*Matrix[I][J] * InvD ) % Prim;
						}
						Matrix[I][L] = 0;
					}
				}

				D = Matrix[L][L];
				InvD = inv( D, Prim );
			}

			F = MatRow;

			/*	Fraction-Free Gaussian Elimination	*/
			/*	Eliminate below row R, with pivot in column K.	*/
			for(;K<MatCol;K++){
				/*	Find a nonzero pivot.	*/
				for(P=R;P<MatRow;P++){
					if( MatLen[P] > K && Matrix[P][K] != 0 ){
						break;
					}
				}
				if( P == MatRow ){
					/* Make Matrix, again.	*/

					break;
				}

				/*	Pivot is in row P, so switch rows P and R.	*/
				if( P != R ){
					Tmp = Matrix[P];
					Matrix[P] = Matrix[R];
					Matrix[R] = Tmp;
					Tmp = MatLen[P];
					MatLen[P] = MatLen[R];
					MatLen[R] = Tmp;
					Tmp = MatCor[P];
					MatCor[P] = MatCor[R];
					MatCor[R] = Tmp;
				}

				for(I=R+1;I<MatRow;I++){
					if( MatLen[R] > MatLen[I] ){
						Tmp = newvect( MatLen[R] );
						for(J=K+1;J<MatLen[I];J++){
							Tmp[J] = ( ( Matrix[R][K]*Matrix[I][J] - Matrix[R][J]*Matrix[I][K] ) * InvDivisor ) % Prim;
						}
						for(;J<MatLen[R];J++){
							Tmp[J] = ( Matrix[R][J]*Matrix[I][K] * InvDivisor ) % Prim;
						}
						Matrix[I] = Tmp;
						MatLen[I] = MatLen[R];

					} else {
						for(J=K+1;J<MatLen[R];J++){
							Matrix[I][J] = ( ( Matrix[R][K]*Matrix[I][J] - Matrix[R][J]*Matrix[I][K] ) * InvDivisor ) % Prim;
						}
						for(;J<MatLen[I];J++){
							Matrix[I][J] = ( Matrix[R][K]*Matrix[I][J] * InvDivisor ) % Prim;
						}
						Matrix[I][K] = 0;
					}
				}

				Divisor = Matrix[R][K];
				InvDivisor = inv( Divisor, Prim );
				R++;
			}

			if( R == MatCol ){
				print("done");
				print("Determinant[",0);print(MatRow,0);print(",",0);print(MatCol,0);print("](",0);print(MatCol,0);print("*",0);print(MatCol,0);print(")...",2);

				M = newmat( MatCol, MatCol );
				for(Im=0;Im<MatCol;Im++){
					I = MatCor[Im][0];
					J = MatCor[Im][1];
					V = setvect( Eql[I], Vdata[I][J][1], Monolist )[0];
					for(Jm=0;Jm<MatCol;Jm++){
						M[Im][Jm] = V[Jm];
					}
				}

				check();
				if( indexof( "nd_det", flist() ) >= 0 ){
					R = nd_det( M );
				} else {
					R = det( M );
				}
				print("done");
				return R;
			}
		}

		Next = nextuse( N, Vdata, Used );
		if( Next == [] ){
			print("");
			check();
			return (-1);
		}

		while( Next != [] ){
			I = car(Next)[0];
			J = car(Next)[1];
			Tmp = setvect( Eqlp[I], Vdata[I][J][1], Monolist );
			Matrix[MatRow] = Tmp[0];
			MatLen[MatRow] = Tmp[1];
			MatCor[MatRow] = [I,J];
			Monolist = Tmp[2];
			MatRow++;

			Next = cdr( Next );
		}
		MatCol = MatLen[MatRow-1];

	}

	/*	Never comes here	*/
}

def setvect( BaseEquation, Monomial, Monolist )
{
	/*	this function returns [ Vector, LengthOfVector, NewMonolist ].	*/

	W = BaseEquation;
	MaxLen = length( Monolist );
	Spvect = [];

	while( W != [] ){
		Mono = car( W )[1];
		Test = listadd( Mono, Monomial );
		M = indexof( Test, Monolist );
		if( M == (-1) ){
			M = MaxLen;
			MaxLen++;
			Monolist = append( Monolist, [Test] );
		}
		Spvect = cons( [ M, car( W )[0] ], Spvect );

		W = cdr( W );
	}

	Vector = newvect( MaxLen );

	while( Spvect != [] ){
		Vector[ car(Spvect)[0] ] = car(Spvect)[1];
		Spvect = cdr( Spvect );
	}

	return [ Vector, MaxLen, Monolist ];
}

def nextuse( N, Vdata, Used )
{
	/*	This function returns list of [I,J] which should be used for next matrix.
	where, I and J are index of Vdata[I][J][..].
	Caution: this function overwrites a array "Used".	*/

	Result = [];
	LenVdata = map( length, Vdata );

	Max = -1;
	for(I=0;I<N;I++){
		if( Used[I] != LenVdata[I] ){
			if( Max == (-1) ){
				Max = Vdata[I][ Used[I] ][0];
			} else if( Vdata[I][ Used[I] ][0] > Max ){
				Max = Vdata[I][ Used[I] ][0];
			}
		}
	}

	if( Max == (-1) ){
		return [];
	}

	for(I=0;I<N;I++){
		for(J=Used[I]; ;J++){
			if( Used[I] == LenVdata[I] ){
				break;
			}
			if( Vdata[I][J][0] >= Max ){
				Result = cons( [I,J], Result );
				Used[I]++;	/*	This effects original array Used	*/
			} else {
				break;
			}
		}
	}

	return Result;
}

def mres( Equations, Vars )
{
	Rsc = getopt(rsc);
	Prim = getopt(p);
	Sub = getopt(sub);
	Rowidx = getopt( rowidx );
	Colidx = getopt( colidx );

	M = mresM( Equations, Vars | rsc=Rsc,p=Prim,sub=Sub,rowidx=Rowidx,colidx=Colidx );

	check();
	print("Determinant",0);print(size(M),0);print("...",2);
	if( indexof( "nd_det", flist() ) >= 0 ){
		R = nd_det( M );
	} else {
		R = det( M );
	}
	print("done");

	check();
	return R;
}

def mresM( Equations, Vars )
{
	Rsc = getopt(rsc);
	Prim = getopt(p);
	Sub = getopt(sub);
	Rowidx = getopt( rowidx );
	Colidx = getopt( colidx );

	check();
	print("Matrix construction...",2);
	P1 = map( dp_ptod, Equations, Vars );
	P2 = map( dp_homo, P1 );
	W = append( Vars, [uc()] );
	P3 = map( dp_dtop, P2, W );
	M = mhrM( P3, W );
	print("done");

	if( type(Rsc) != -1 && Rsc == 1 ){
		check();
		print("Rank Matrix Construction",0);print(size(M),0);print("...",2);
		Submatrix = submatrix( M | p=Prim,sub=Sub,rowidx=Rowidx,colidx=Colidx );
		print("done");
	} else {
		Submatrix = M;
	}

	return Submatrix;
}

def mhrM( Equations, Vars )
{
	N = length(Vars) - 1;

	Di = newvect(N+1);

	/*	Computing d = \sum_{i=0}^n d_i-n	*/
	for(I=0;I<=N;I++){
		Di[I] = dp_td( dp_ptod( Equations[I], Vars ) );
		D += Di[I];
	}
	D = D - N;

	Mono = dmono( D, N+1 );
	check();

	S = newvect( N+1 );
	for(I=0;I<=N;I++){
		S[I] = [];
	}

	Work = Mono;
	while( Work != [] ){
		for(I=0;I<=N;I++){
			T = car( Work );
			if( T[I] >= Di[I] ){
				S[I] = cons( T, S[I] );
				break;
			}
		}
		Work = cdr( Work );
	}

	L = length( Mono );
	M = newmat( L, L );

	for(I=K=0;I<=N;I++){
		T = S[I];
		while( T != [] ){
			DF = dp_ptod( Equations[I], Vars );
			A = ltov(car(T));
			A[I] = A[I] - Di[I];
			A = vtol( A );

			while( DF != 0 ){
				C = dp_hc( DF );
				V = vtol( dp_etov( DF ) );
				Idx = indexof( listadd( V, A ), Mono );
				M[K][Idx] = C;
				DF = dp_rest( DF );
			}
			T = cdr( T );
			K++;
		}
	}

	return M;
}


def dmono( D, N )
{
	/*	N : number of variable.
		D : total degree.
		return : all monomial of total degree D for N variable.
		dmono( 2, 2 ) returns [ [0,2], [1,1], [2,0] ] .
	*/

	if( N == 1 ){
		return [ [D] ];
	}

	R = [];
	for(I=0;I<=D;I++){
		Last = dmono( I, N-1 );

		while( Last != [] ){
			R = cons( cons( D-I, car(Last) ), R );
			Last = cdr( Last );
		}
	}

	return R;
}

def dres( Equations, Vars )
{
	Prim = getopt(p);
	Sub = getopt(sub);
	Norsc = getopt(norsc);
	Rowidx = getopt(rowidx);
	Colidx = getopt(colidx);

	Submatrix = dresM( Equations, Vars |p=Prim,sub=Sub,norsc=Norsc,rowidx=Rowidx,colidx=Colidx );

	print("Determinant",0);print(size(Submatrix),0);print("...",2);
	if( indexof( "nd_det", flist() ) >= 0 ){
		R = nd_det( Submatrix );
	} else {
		R = det( Submatrix );
	}
	print("done");

	check();
	return R;
}

def dresM( Equations, Vars )
{
	Prim = getopt(p);
	Sub = getopt(sub);
	Norsc = getopt(norsc);
	Rowidx = getopt(rowidx);
	Colidx = getopt(colidx);

	print("Dixon polynomial...",2);
	check();
	Tmp = dixonpolynomial( Equations, Vars );
	print("done");
	check();

	Dpoly = Tmp[0];
	UC = Tmp[1];

	print("Matrix decomposition...",2);
	Matrix =  matrixdecomp( Dpoly, UC, Vars );
	print("done");
	check();

	if( Norsc != 1 ){
		print("Rank Submatrix Construction",0);print(size(Matrix[1]),0);print("...",2);
		Submatrix = submatrix( Matrix[1] |p=Prim,sub=Sub,rowidx=Rowidx,colidx=Colidx );
		print("done");
	} else {
		Submatrix = Matrix[1];
	}
	check();

	return Submatrix;
}

def dixonpolynomial( Equations, Vars )
{
	/*	This function returns dixonpolynomial and new variable:
		It returns [ Dixonpolynomial, vector of new variable ].
	*/

	N = length( Vars );

	if( length( Equations ) != N+1 ){
		print("dixonpolynomial : length of Vars is not correct");
		return;
	}

	UC = newvect( N );
	for(I=0;I<N;I++){
		UC[I] = uc();
	}

	M = newmat( N+1, N+1 );

	for(J=0;J<=N;J++){
		M[0][J] = Equations[J];
	}

	for(I=1;I<=N;I++){
		Equations = subst( Equations, Vars[I-1], UC[I-1] ); 
		for(J=0;J<=N;J++){
			M[I][J] = Equations[J];
		}
	}

	if( indexof( "nd_det", flist() ) >= 0 ){
		Dpoly = nd_det( M );
	} else {
		Dpoly = det( M );
	}

	for(I=0;I<N;I++){
		Dpoly = sdiv( Dpoly, ( Vars[I] - UC[I] ) );
	}

	return [ Dpoly, UC ];
}

def matrixdecomp( Dpoly, UC_, Vars )
{
	/*	This function decomposes Dixonpolynomial to WDV. where,
		V is column vector of all monomials in "Vars" which appear in "Dpoly".
		V is row vector of all monomials in "UC" which appear in "Dpoly".
		remark : "Dpoly" is polynomial, "UC" is vector and "Vars" is list.
	*/

	UC = vtol(UC_);
	Dpoly2 = dp_ptod( Dpoly, UC );

	RowList = RowVect = [];
	while( Dpoly2 != 0 ){
		RowList = cons( dp_hc( Dpoly2 ), RowList );
		RowVect = cons( dp_etov( Dpoly2 ), RowVect );
		Dpoly2 = dp_rest( Dpoly2 );
	}
	MaxRow = length( RowList );

	M = newvect( MaxRow );

	ColVect = [];
	for(I=0;I<MaxRow;I++){
		ThisRow = [];
		Obj = dp_ptod( RowList[I], Vars );
		while( Obj != 0 ){
			HT = dp_etov( Obj );
			T = indexof( HT, ColVect );
			if( T == (-1) ){
				T = length( ColVect );
				ColVect = append( ColVect, [ HT ] );
			}
			ThisRow = cons( [ T, dp_hc( Obj ) ], ThisRow );
			Obj = dp_rest( Obj );
		}
		M[I] = newvect( length( ColVect ) );
		while( ThisRow != [] ){
			Tmp = car( ThisRow );
			M[I][ Tmp[0] ] = Tmp[1];
			ThisRow = cdr( ThisRow );
		}
	}
	MaxCol = length( ColVect );

	Matrix = newmat( MaxRow, MaxCol );
	for(I=0;I<MaxRow;I++){
		JM = length( M[I] );
		for(J=0;J<JM;J++){
			Matrix[I][J] = M[I][J];
		}
	}

	V = newvect( MaxRow );
	for(I=0;I<MaxRow;I++){
		V[I] = dp_dtop( dp_vtoe( RowVect[I] ), UC );
	}

	W = newvect( MaxCol );
	for(I=0;I<MaxCol;I++){
		W[I] = dp_dtop( dp_vtoe( ColVect[I] ), Vars );
	}

	return [ V, Matrix, W ];
}

def check()
{
	Time = cons( time(), Time );
}

def clear()
{
	Time = [];
}

def gettime()
{
	return Time;
}

def diff( A, B )
{
	return [ B[0]-A[0], B[1]-A[1], B[2]-A[2], B[3]-A[3] ];
}


def submatrix( Matrix )
{
	/*	This function returns full-rank submatrix of "Matrix".	*/

	MatRow = size( Matrix )[0];
	MatCol = size( Matrix )[1];

	RowIdx = getopt(rowidx);
	ColIdx = getopt(colidx);

	if( type(RowIdx) != 5 || length(RowIdx) != MatRow ){
		RowIdx = newvect( MatRow );
		for(I=0;I<MatRow;I++){
			RowIdx[I] = I;
		}
	}
	if( type(ColIdx) != 5 || length(ColIdx) != MatCol ){
		ColIdx = newvect( MatCol );
		for(I=0;I<MatCol;I++){
			ColIdx[I] = I;
		}
	}

	M = newmat( MatRow, MatCol );
	for(I=0;I<MatRow;I++){
		for(J=0;J<MatCol;J++){
			M[I][J] = Matrix[ RowIdx[I] ][ ColIdx[J] ];
		}
	}

	Prim = getopt(p);
	Sub = getopt(sub);

	CVar = vars( M );

	if( type(Prim) != 1 ){
		Prim = 65521;
	}

	if( type(Sub) != 4 ){
		Sub = [];
		for(I=0;I<length(CVar);I++){
			Sub = cons( prime(15+2*I) % Prim , Sub );
		}
	}

	while( CVar != [] ){
		M = subst( M, car(CVar), car(Sub) );
		CVar = cdr( CVar );
		Sub = cdr( Sub );
	}


	/*	Initialize for Fraction-Free Gaussian Elimination	*/
	InvDivisor = 1;

	/*	Fraction-Free Gaussian Elimination	*/
	/*	Eliminate below row R, with pivot in column K.	*/
	for(K=R=0;K<MatCol&&R<MatRow;K++,R++){

		/*	Find a nonzero pivot.	*/
		for(P=R;P<MatRow;P++){
			if( M[P][K] != 0 ){
				break;
			}
		}
		if( P == MatRow ){
			if( R == MatRow-1 ){
				MatCol--;
				break;
			}

			/*	switch columns K and MatCol-1	*/
			for(I=R;I<MatRow;I++){
				Tmp = M[I][MatCol-1];
				M[I][MatCol-1] = M[I][K];
				M[I][K] = Tmp;
			}
			ColIdx[K] = ColIdx[MatCol-1];
			MatCol--;			

			/*	do again	*/
			R--;
			K--;
			continue;
		}

		/*	Pivot is in row P, so switch rows P and R.	*/
		if( P != R ){
			for(J=K;J<MatCol;J++){
				Tmp = M[P][J];
				M[P][J] = M[R][J];
				M[R][J] = Tmp;
			}
			Tmp = RowIdx[P];
			RowIdx[P] = RowIdx[R];
			RowIdx[R] = Tmp;
		}

		for(I=R+1;I<MatRow;I++){
			for(J=K+1;J<MatCol;J++){
				M[I][J] = ( ( M[R][K]*M[I][J] - M[R][J]*M[I][K] ) * InvDivisor ) % Prim;
			}
			M[I][K] = 0;
		}

		Divisor = M[R][K];
		InvDivisor = inv( Divisor, Prim );
	}

	Submatrix = newmat( R, R );
	for(I=0;I<R;I++){
		for(J=0;J<R;J++){
			Submatrix[I][J] = Matrix[ RowIdx[I] ][ ColIdx[J] ];
		}
	}

	return Submatrix;
}
endmodule$

end$
