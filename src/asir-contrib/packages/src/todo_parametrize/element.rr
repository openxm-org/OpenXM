/* $OpenXM$ */
/*
 Input: 変数を要素にもつリストVars.
 Output: Vars から変数x,y,z 取り除いたリスト。
*/

def exclude_xyz(Vars){
    L=length(Vars);
    for(Vars_=[],I=L-1; I>=0; I--){
	V=Vars[I];
	if(V!=x && V!=y && V!=z)
	    Vars_=cons(V,Vars_);
    }
    return(Vars_);
}

/*
random_numbers(N,B|seed=S);
 Input: 自然数N,B,S.
 Output: -B 以上B 未満のN 個の整数をランダムに返す(リスト)。
*/

def random_numbers(N,B){
    Seed=getopt(seed);
    Type=type(Seed);
    if(Type==-1)	/* 'seed' is not supecified. */
	return(random_numbers_(N,B));
    else if(Type==1)	/* 'seed' is a number. */
	return(random_numbers_seed(N,B,Seed));
}

def random_numbers_(N,B){
    for(L=[],I=1; I<=N; I++)
	L=cons(random()%(2*B)-B,L);

    return(L);
}

def random_numbers_seed(N,B,Seed){
    for(L=[],I=1; I<=N; I++,Seed++)
	L=cons(random(Seed)%(2*B)-B,L);

    return(L);
}

/*
 Input: 点P=[x,y,z] (斉次座標).
 Output: 点P を通る直線全体(パラメーターs,t を含む)。
*/

def lines(P){
    if(P==[0,0,0])
	return("***Input incorrect***");

    L=a*x+b*y+c*z;
    C=subst(L,x,P[0],y,P[1],z,P[2]);
    V=vars(C)[0];
    L_=ptozp(subst(L,V,-coef(C,0,V)/coef(C,1,V)));

    Vars=exclude_xyz(vars(L_));
    return(subst(L_,Vars[0],s,Vars[1],t));
}

/*
 Input: 点P=[x,y,z] (斉次座標).
 Output: 点P を通る直線を任意にひとつ返す。
*/

def random_line(P,B){
    Seed=getopt(seed);
    Type=type(Seed);
    if(Type==-1)	/* 'seed' is not supecified. */
	return(random_line_(P,B));
    else if(Type==1)	/* 'seed' is a number. */
	return(random_line_seed(P,B,Seed));
}

def random_line_(P,B){
    L=lines(P);
    Ns=random_numbers(2,B);
    L_=ptozp(subst(L,s,Ns[0],t,Ns[1]));
    return(L_);
}

def random_line_seed(P,B,Seed){
    L=lines(P);
    Ns=random_numbers(2,B|seed=Seed);
    L_=ptozp(subst(L,s,Ns[0],t,Ns[1]));
    return(L_);
}

/*
 Input: 異なる二点P1=[x1,y1,z1],P2=[x2,y2,z2] (斉次座標).
 Output: P1,P2 を通る直線の方程式。
*/

def line2(P1,P2){
    A=newmat(3,3,[[x,y,z],P1,P2]);
    L=ptozp(det(A));
    return(L);
}

/*
 Input: 三元二次形式F(x,y,z).
 Output: F がC[x,y,z] において既約ならば"irreducible",
	 可約ならば"reducible".
*/

def irr_conic(F){
    S=sing(F);
    if(S==[])
	return("irreducible");
    else
	return("reducible");
}

/*
 Input: 多項式F.
 Output: F が既約なら"irreducible", 可約なら"reducible".
*/

def irr(F){
    A=fctr(F);
    if(F==0 || (M=length(A))>=3 || (M==2 && A[1][1]>=2))
	return("reducible");
    else
	return("irreducible");
}

/*
 Input: 多項式F.
 Output: F が重複因子をもつならば"multiple divisor",
	 なければ"no multiple divisor"
*/

def multi_div(F){
    D=fctr(F);
    L=length(D);
    for(I=1; I<L; I++)
	if(D[I][1]>=2)
	    return("multiple divisor");

    return("no multiple divisor");
}

/*
 Input: 多項式F.
 Output: F の全次数。
*/

def tdeg(F){
    Vars=vars(F); L=length(Vars);
    if(L>=2){
	V=Vars[0];
	N=deg(F,V); M=tdeg(coef(F,N,V)); Max=M+N;
	for(I=N-1; I>=0; I--)
	    if((G=coef(F,I,V))!=0 && (D=I+tdeg(G))>Max)
		    Max=D;

	return(Max);
    }else{
	if(L==1)
	    return(deg(F,Vars[0]));
	else
	    return(0);
    }
}

/*
 Input: 多項式f(x,y).
 Output: f(x,y) を斉次化して得られる斉次多項式F(x,y,z).
*/

def td_homogenize(F){
    Vars=vars(F); L=length(Vars);
    for(I=0; I<L; I++){
	V=Vars[I];
	if(V!=x && V!=y)
	return("***Input must be polynomial of variable x,y***");
    } 

    N=tdeg(F);
    return(red(z^N*subst(F,x,x/z,y,y/z)));
}

/*
 Input: 多項式F=F(x,y,z). 点P=[x,y,z] (斉次座標)。
 Output: 次の条件を満たす0 以上の整数N.:
	 F をN 階偏微分して得られる多項式で初めて点P で0 に
	 ならないようなものがある。
*/

def multia(F,P){
    for(N=0; multib(F,N,P)=="all zero"; N++);
	return(N);
}

/*
 Input: 多項式F=F(x,y,z). 0 以上の整数N. 点P=[x,y,z] (斉次座標)。
 Output: F をx,y,z に関してN 階偏微分して得られる多項式の中に
	 点P=[x,y,z] で0 にならないものがあれば"not all zero"
	 を,すべて0 ならば"all zero" を返す。
*/

def multib(F,N,P){
    for(I=1; I<=N+1; I++)
	for(J=I+1; J<=N+2; J++){
	    D=pdiff(F,I-1,J-1-I,N+2-J);

	    if(simpalg(subst(D,x,P[0],y,P[1],z,P[2]))!=0)
		return("not all zero");
	}
    return("all zero");
}

/*
 Input: 多項式F=F(x,y,z). 自然数L,M,N.
 Output: F を変数x,y,z について,それぞれL,M,N 回
	 偏微分して得られる多項式。
*/

def pdiff(F,L,M,N){

    if(L<0 || M<0 || N<0)
	print("arguments incorrect");

    if(L!=0){
	for(I=1; I<=L; I++)
	    F=diff(F,x);
    }

    if(M!=0){
	for(J=1; J<=M; J++)
	    F=diff(F,y);
    }

    if(N!=0){
	for(K=1; K<=N; K++)
	    F=diff(F,z);
    }

    return(F);
}

/*
 Input: 多項式 F=F(x,y,z),X=X(x,y,z),Y=Y(x,y,z),Z=Z(x,y,z).
 Output: 多項式 F*(x,y,z):=F(X(x,y,z),Y(x,y,z),Z(x,y,z)).
*/

def subst_(F,X,Y,Z){
    F=subst(F,x,u,y,v,z,w);
    F=subst(F,u,X,v,Y,w,Z);
    return(F);
}

def lzero(F,Var){
    return(-coef(F,0,Var)/coef(F,1,Var));
}

def lzeroa(F,Var){
    return(-simpalg(coef(F,0,Var)/coef(F,1,Var)));
}

/*
 Input: 変数x,y の二変数多項式f=f(x,y).
 Output: f(x,y) を斉次部分に分解したときの最低次部分。
*/

def mhp(F){
    if(F==0)
	return(0);

    M=mindeg(F,x); Fy=coef(F,M,x);
    N=mindeg(Fy,y); A=coef(Fy,N,y);

    for(Min=M+N,P=F-Fy*x^M,T=A*y^N*x^M; mindeg(P,x)<=Min && P!=0; P=P-Py*x^M){
	M=mindeg(P,x); Py=coef(P,M,x);
	N=mindeg(Py,y);

	if(M+N==Min)
	    T=T+coef(Py,N,y)*y^N*x^M;

	if(M+N<Min){
	    T=coef(Py,N,y)*y^N*x^M; Min=M+N;
	}
    }
    return([T,Min]);
}

/*
 Input: 係数に代数的数Al (リスト)を含む多項式F.
 Output; F を有理数倍して, F の変数と代数的数の係数
	 を最大公約数が1 の整数に直す。
*/

def ptozpa(F,Al){
    G=algptorat(F);
    H=ptozp(G);
    return(rattoalgp(H,Al));
}

/*
 Input: 係数に代数的数Al (リスト)を含む斉次多項式F=F(x,y,z).
	点P=[a,b,c].
 Output: 点P が原点にくるようにF を射影変換で変形する。
*/

def center(F,P,Al){
    if(P[2]==1){
	G=subst_(F,x+P[0]*z,y+P[1]*z,z);
    }else{
	if(P[1]==1)
	    G=subst_(F,y+P[0]*z,z,x);
	else
	    G=subst_(F,z,y,x);
    }

    return(ptozpa(simpalg(G),Al));
}

/*
 Input: 斉次多項式F=F(x,y,z).
 Output: F(y*z,z*x,x*y) から因数x,y,zを取り除いて得られる
	 斉次多項式。
*/

def cremona(F){
    G=subst_(F,y*z,z*x,x*y);

    while((Q=tdiv(G,x))!=0)
	G=Q;

    while((Q=tdiv(G,y))!=0)
	G=Q;

    while((Q=tdiv(G,z))!=0)
	G=Q;

    return(G);
}

/*
 Input: 自然数N.
 Output: cos(Nz)=f(x,y)
	 sin(Nz)=g(x,y)
	 (x=cos(z),y=sin(z). f(x,y),g(x,y) はx,y の多項式。)
	 と表される。関数cs(N) は[f(x,y),g(x,y)] を返す。
*/

def cs(N){
    if(N==1){
	return([x,y]);
    }else{
	L=cs(N-1);
	X=L[0]; Y=L[1];
	return([X*x-Y*y,Y*x+X*y]);
    }
}

/*
 Input: 互いに素な自然数M,N.
 Output: x=sin(Mz),y=cos(Nz) によって定義されるリサージュ曲線
	 の定義多項式F(x,y,z).
*/

def lissajou(M,N){
    X=subst(cs(M)[1],x,(1-t^2)/(1+t^2),y,2*t/(1+t^2));
    Y=subst(cs(N)[1],x,(1-t^2)/(1+t^2),y,2*t/(1+t^2));
    DX=dn(X); NX=nm(X); DY=dn(Y); NY=nm(Y);
    R=res(t,DX*x-NX,DY*y-NY);		/* R は既約か？ */
    F=td_homogenize(fctr(R)[1][0]);
}
end$
